const Dotenv = require("dotenv-webpack");
const FaviconsWebpackPlugin = require("favicons-webpack-plugin");
const HtmlWebpackHarddiskPlugin = require("html-webpack-harddisk-plugin");
const HtmlWebpackPlugin = require("html-webpack-plugin");
const path = require("path");
const merge = require("webpack-merge");

const common = require("./webpack.app.common.js");

module.exports = merge(common, {
  mode: "development",
  devServer: {
    contentBase: path.resolve(__dirname, "public/dist"),
    port: 8080,
    historyApiFallback: {
      rewrites: [
        // Let the "embed" app entrypoint's SPA router take over for any path
        // beginning with `/embed`.
        {
          from: /\/embed/,
          to: "/embed.html"
        },
        // Let the main app entrypoint's SPA router take over for any other
        // path.
        {
          from: /\//,
          to: "/app.html"
        }
      ]
    }
  },
  plugins: [
    new Dotenv(),
    new HtmlWebpackPlugin({
      alwaysWriteToDisk: true,
      template: path.resolve(__dirname, "public/app.ejs"),
      chunks: ["app"],
      filename: path.resolve(__dirname, "public/dist/app.html"),
      // Define any injectable `options` variables:
      environment: process.env.NODE_ENV,
      googleAnalyticsTrackingId: process.env.GOOGLE_ANALYTICS_TRACKING_ID
    }),
    new HtmlWebpackPlugin({
      alwaysWriteToDisk: true,
      template: path.resolve(__dirname, "public/embed.ejs"),
      chunks: ["embed"],
      filename: path.resolve(__dirname, "public/dist/embed.html"),
      // Define any injectable `options` variables:
      environment: process.env.NODE_ENV,
      googleAnalyticsTrackingId: process.env.GOOGLE_ANALYTICS_TRACKING_ID
    }),
    new FaviconsWebpackPlugin({
      logo: path.resolve(__dirname, "public/assets/images/favicon.png"),
      prefix: "favicons/",
      inject: true,
      favicons: {
        appName: "COVID-19 Death Value",
        appDescription: "COVID-19 Death Value",
        developerName: "bradley.j.griffith@gmail.com",
        developerURL: "http://bradley-griffith.com",
        background: "#DEDEDE",
        theme_color: "#DEDEDE"
      }
    }),
    // After many hours of trying, it seems that HtmlWebpackPlugin and
    // webpack-dev-server simply dont play well together if your app relies on
    // absolute paths to the files generated by HtmlWebpackPlugin. In our case,
    // we want every asset that isnt the HTML files rendered by
    // HtmlWebpackPlugin to exist in `public/dist/static/`, and our HTML files
    // to exist in `public/dist/static/`. After all attempts it looks like
    // HtmlWebpackPlugin simply removes every path portion before the final
    // filename, placing the HTML into the publicPath configured in output.
    // This just doesnt work for us. Therefore, we use HtmlWebpackHarddiskPlugin
    // which writes the rendered HTMLs into their _defined_ paths (through
    // their filenames) to the path we want them at. The files will update
    // according to changes, and the `public/dist/` directory is gitignored,
    // so this should be fine.
    new HtmlWebpackHarddiskPlugin()
  ]
});
